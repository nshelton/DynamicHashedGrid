#pragma kernel Integrate
#pragma kernel ZeroOutOffsets
#pragma kernel ResetIndices
#pragma kernel SortBuffer
#pragma kernel CalculateOffsets
#pragma kernel ParallelSum

 // Particle's data
struct Particle
{
    float3 position;
    float3 velocity;
};

float _deltaTime;
float2 _mousePosition;
float _gridSizeScale;
int _numParticles;
 
RWStructuredBuffer<Particle> _particleBuffer;
RWStructuredBuffer<int> _sortedIndexBuffer;
RWStructuredBuffer<int> _cellOffsetBuffer;
RWStructuredBuffer<float3> _sumBuffer;

#define TOTAL_GRID_CELL_COUNT (64 * 64 * 64);

int3 GetCellIndex(in Particle p)
{
    return floor(p.position / _gridSizeScale);
}

inline uint GetHashedCell(in int3 cellIndex)
{
    const uint p1 = 73856093; // some large primes
    const uint p2 = 19349663;
    const uint p3 = 83492791;
    int n = p1 * cellIndex.x ^ p2 * cellIndex.y ^ p3 * cellIndex.z;
    n %= TOTAL_GRID_CELL_COUNT;
    return n;
}

[numthreads(256, 1, 1)]
void Integrate(uint3 id : SV_DispatchThreadID)
{ 
    int3 cellIndex = GetCellIndex(_particleBuffer[id.x]);

    for (int i = -1; i <= 1; ++i)
    {
        for (int j = -1; j <= 1; ++j)
        {
            for (int k = -1; k <= 1; ++k)
            {
                int3 neighborIndex = cellIndex + int3(i, j, k);
                uint flatNeighborIndex = GetHashedCell(neighborIndex);
       
                // look up the offset to the cell:
                uint neighborIterator = _cellOffsetBuffer[flatNeighborIndex];

                // iterate through particles in the neighbour cell (if iterator offset is valid)
                while (neighborIterator != 0xFFFFFFFF && neighborIterator < _numParticles)
                {
                    uint particleIndexB = _sortedIndexBuffer[neighborIterator];
                    if (GetHashedCell(GetCellIndex(_particleBuffer[particleIndexB])) != flatNeighborIndex)
                    {
                        break; // it means we stepped out of the neighbour cell list!
                    }

                    float3 delta = _particleBuffer[particleIndexB].position - _particleBuffer[id.x].position;
                    float distancesq = dot(delta, delta);

                     if (distancesq < 5)
                    {
                        distancesq = max(0.1, distancesq);
                        _particleBuffer[id.x].velocity += delta * _deltaTime / (distancesq);
                    }
        

                    neighborIterator++; // iterate...
                }

            }
        }
    }

   // _particleBuffer[id.x].velocity *= 0.9999;
    _particleBuffer[id.x].position += _particleBuffer[id.x].velocity * _deltaTime;
    _particleBuffer[id.x].position -= _sumBuffer[0];
}


[numthreads(256, 1, 1)]
void CalculateOffsets(uint3 id : SV_DispatchThreadID)
{
    uint particleIndex = _sortedIndexBuffer[id.x];
    uint cellIndex = GetHashedCell(GetCellIndex(_particleBuffer[particleIndex]));
    InterlockedMin(_cellOffsetBuffer[cellIndex], id.x);
}

// based on https://github.com/nobnak/GPUMergeSortForUnity
int _block;
int _count;
int _dim;

[numthreads(256, 1, 1)]
void SortBuffer(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    uint j = i ^ _block;
	
    if (j < i || i >= _count) 
        return;

    uint key_i = _sortedIndexBuffer[i];
    uint key_j = _sortedIndexBuffer[j];
    // Todo create new array of Cell index for better memory access pattern
    int value_i = GetHashedCell(GetCellIndex(_particleBuffer[key_i]));
    int value_j = GetHashedCell(GetCellIndex(_particleBuffer[key_j]));
	
    int diff = (value_i - value_j) * ((i & _dim) == 0 ? 1 : -1);
    if (diff > 0)
    {
        _sortedIndexBuffer[i] = key_j;
        _sortedIndexBuffer[j] = key_i;
    }
}


[numthreads(256, 1, 1)]
void ZeroOutOffsets(uint3 id : SV_DispatchThreadID)
{
    _cellOffsetBuffer[id.x] = 0xFFFFFFFF;
}

[numthreads(256, 1, 1)]
void ResetIndices(uint3 id : SV_DispatchThreadID)
{
    _sortedIndexBuffer[id.x] = id.x;
}

[numthreads(256, 1, 1)]
void ParallelSum(uint3 id : SV_DispatchThreadID)
{
    if (_dim == 1)
    {
        _sumBuffer[id.x] = _particleBuffer[id.x].position;
    }
    else if (_dim % id.x == 0)
    {
        _sumBuffer[id.x] = (_particleBuffer[id.x].position +
                           _particleBuffer[id.x + (_dim - 1)].position) / 2.0;
    }
}